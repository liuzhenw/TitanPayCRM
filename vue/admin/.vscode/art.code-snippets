{
  "Api service template": {
    "scope": "typescript",
    "prefix": "api",
    "body": [
      "import request from '@/utils/http'",
      "import { $2 } from './types'",
      "export class $1Service {",
      "  $0",
      "}"
    ]
  },
  "Dto template": {
    "scope": "typescript",
    "prefix": "dto",
    "body": ["export interface $1Dto {", "  $0", "}"]
  },
  "Table template": {
    "prefix": "table",
    "body": [
      "<template>",
      "  <FullScreen>",
      "    <div id=\"container\">",
      "      <el-card shadow=\"never\" class=\"art-table-card\">",
      "        <ArtTable row-key=\"id\" :data=\"tableData\" :loading=\"dataLoading\">",
      "          <el-table-column key=\"id\" prop=\"id\" label=\"标识\" />",
      "          <el-table-column key=\"name\" prop=\"name\" label=\"名称\" />",
      "           $0",
      "          <el-table-column key=\"createdAt\" prop=\"createdAt\" label=\"创建时间\">",
      "            <template #default=\"{ row }\">",
      "              <Datetime :value=\"row.createdAt\" />",
      "            </template>",
      "          </el-table-column>",
      "          <el-table-column key=\"actions\" align=\"right\" width=\"140\">",
      "            <template #default=\"{ row }\">",
      "              <el-space>",
      "                <ArtButtonTable type=\"edit\" />",
      "                <ArtButtonTable type=\"delete\" />",
      "              </el-space>",
      "            </template>",
      "          </el-table-column>",
      "        </ArtTable>",
      "      </el-card>",
      "    </div>",
      "  </FullScreen>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "  import { $1Service, $1Dto } from '@/api/services'",
      "  import { ref } from 'vue'",
      "",
      "  const tableData = ref<$1Dto[]>([])",
      "  const dataLoading = ref(false)",
      "  const fetchData = async () => {",
      "    dataLoading.value = true",
      "    tableData.value = await $1Service.getList().finally(() => (dataLoading.value = false))",
      "  }",
      "",
      "  onMounted(() => {",
      "    fetchData()",
      "  })",
      "</script>",
      "",
      "<style scoped lang=\"scss\"></style>",
      ""
    ],
    "description": "Table template"
  },
  "Paged table template": {
    "prefix": "ptable",
    "body": [
      "<template>",
      "  <FullScreen>",
      "    <div id=\"container\">",
      "      <ArtSearchBar",
      "        v-model:filter=\"filter\"",
      "        :items=\"filterItems\"",
      "        @search=\"onSearch\"",
      "        @reset=\"onReset\"",
      "      />",
      "      <el-card shadow=\"never\" class=\"art-table-card\">",
      "        <ArtTableHeader @refresh=\"onSearch\">",
      "          <template #left>",
      "            <el-button icon=\"Plus\">创建</el-button>",
      "          </template>",
      "        </ArtTableHeader>",
      "        <ArtTable",
      "          row-key=\"id\"",
      "          :data=\"tableData\"",
      "          :loading=\"dataLoading\"",
      "          v-model:pagination=\"pagination\"",
      "          :marginTop=\"10\"",
      "          @pagination:current-change=\"onPaginationChange\"",
      "          @pagination:size-change=\"onPaginationChange\"",
      "          @sort-change=\"onSortChange\"",
      "        >",
      "          <el-table-column key=\"name\" prop=\"name\" label=\"名称\" />",
      "          $0",
      "          <el-table-column key=\"actions\" width=\"140\" align=\"right\">",
      "            <template #default=\"{ row }\">",
      "              <el-space>",
      "                <ArtButtonTable type=\"edit\" />",
      "                <ArtButtonTable type=\"delete\" />",
      "              </el-space>",
      "            </template>",
      "          </el-table-column>",
      "        </ArtTable>",
      "      </el-card>",
      "    </div>",
      "  </FullScreen>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "  import { ref } from 'vue'",
      "  import { $1Service, $1Dto, $1QueryInput } from '@/api/services'",
      "  import { SearchFormItem } from '@/types'",
      "",
      "  const tableData = ref<$1Dto[]>([])",
      "  const filter = reactive<$1QueryInput>({})",
      "  const filterItems: SearchFormItem[] = [",
      "    {",
      "      label: '用户名',",
      "      prop: 'name',",
      "      type: 'input',",
      "      config: {",
      "        clearable: true",
      "      }",
      "    }",
      "  ]",
      "  const pagination = reactive({",
      "    current: 1,",
      "    size: 10,",
      "    total: 0",
      "  })",
      "  const dataLoading = ref(false)",
      "  const fetchData = async (input: $1QueryInput) => {",
      "    dataLoading.value = true",
      "    try {",
      "      const res = await $1Service.getList(input)",
      "      pagination.total = res.totalCount",
      "      tableData.value = res.items",
      "    } finally {",
      "      dataLoading.value = false",
      "    }",
      "  }",
      "",
      "  const onPaginationChange = () => {",
      "    filter.maxResultCount = pagination.size",
      "    filter.skipCount = (pagination.current - 1) * pagination.size",
      "    fetchData(filter)",
      "  }",
      "",
      "  const onSortChange = (data: { column: any; prop: string; order: any }) => {",
      "    if (!data.prop || !data.order) {",
      "      filter.sorting = undefined",
      "    } else {",
      "      const field = data.prop[0].toUpperCase() + data.prop.slice(1)",
      "      const dire = data.order === 'ascending' ? 'asc' : 'desc'",
      "      filter.sorting = `\\${field} \\${dire}`",
      "    }",
      "    fetchData(filter)",
      "  }",
      "  const onSearch = () => {",
      "    pagination.current = 1",
      "    fetchData(filter)",
      "  }",
      "  const onReset = () => {",
      "    filter.name = undefined",
      "    onSearch()",
      "  }",
      "",
      "  onMounted(() => {",
      "    fetchData(filter)",
      "  })",
      "</script>",
      "",
      "<style scoped lang=\"scss\"></style>",
      ""
    ],
    "description": "Paged table template"
  },
  "Update drawer template": {
    "prefix": "update-drawer",
    "body": [
      "<template>",
      "  <el-drawer v-model=\"modelValue\">",
      "    <template #header>",
      "      <span>修改 {{ value.name }} $0</span>",
      "    </template>",
      "",
      "    <el-form ref=\"form\" :model=\"model\" :rules=\"rules\" label-width=\"auto\">",
      "      <el-form-item label=\"名称\" prop=\"name\">",
      "        <el-input v-model=\"model.name\" />",
      "      </el-form-item>",
      "    </el-form>",
      "",
      "    <template #footer>",
      "      <el-button type=\"primary\" :loading=\"isSubmitting\" @click=\"onSubmit\">提交</el-button>",
      "      <el-button @click=\"onCancel\">取消</el-button>",
      "    </template>",
      "  </el-drawer>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "  import { $1Service, $1Dto, $1UpdateInput } from '@/api/services'",
      "  import { FormInstance, FormRules } from 'element-plus'",
      "  defineOptions({ name: '$1UpdateDrawer' })",
      "  const emit = defineEmits(['submitted'])",
      "  const modelValue = defineModel({ type: Boolean })",
      "  const { value } = defineProps<{ value: $1Dto }>()",
      "  const form = ref<FormInstance>()",
      "  const model = reactive<$1UpdateInput>({ ...value })",
      "  const rules: FormRules = {",
      "    name: [",
      "      { required: true, message: '请输入名称', trigger: 'blur' },",
      "      { min: 2, max: 32, message: '长度为 2 - 32 位', trigger: 'blur' }",
      "    ]",
      "  }",
      "  watch(",
      "    () => value,",
      "    () => Object.assign(model, value)",
      "  )",
      "  const onCancel = () => {",
      "    modelValue.value = false",
      "  }",
      "  const isSubmitting = ref(false)",
      "  const onSubmit = async () => {",
      "    const valid = await form.value?.validate()",
      "    if (!valid) return",
      "",
      "    isSubmitting.value = true",
      "    const res = await $1Service.update(value.id, model).finally(",
      "      () => (isSubmitting.value = false)",
      "    )",
      "    ElMessage.success('修改成功')",
      "    modelValue.value = false",
      "     emit('submitted')",
      "  }",
      "</script>",
      "",
      "<style scoped lang=\"scss\"></style>",
      ""
    ],
    "description": "Update drawer template"
  }
}
